name: Deploy Newest version

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted]

    env:
      COMPOSE_PROJECT_NAME: tanknu
      DB_VOLUME_NAME: tanknu_dbdata
      INGEST_SERVICE_NAME: ingest-1

    steps:
      - name: Pre-clean workspace
        shell: bash
        run: |
          set -e
          shopt -s dotglob nullglob
          if [ -d "$GITHUB_WORKSPACE" ]; then
            rm -rf "$GITHUB_WORKSPACE"/* || true
          fi

      - name: Checkout fresh
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Detect docker compose
        id: dccmd
        shell: bash
        run: |
          if docker compose version >/dev/null 2>&1; then
            echo "cmd=docker compose" >> "$GITHUB_OUTPUT"
          elif docker-compose version >/dev/null 2>&1; then
            echo "cmd=docker-compose" >> "$GITHUB_OUTPUT"
          else
            echo "Geen docker compose gevonden" >&2
            exit 1
          fi

      - name: Validate compose
        shell: bash
        run: |
          DC="${{ steps.dccmd.outputs.cmd }}"
          $DC config >/dev/null

      - name: Tear down stack (keep DB volume)
        shell: bash
        run: |
          set -e
          DC="${{ steps.dccmd.outputs.cmd }}"
          DB_VOL="${DB_VOLUME_NAME}"

          echo ">>> Compose down (containers/networks/images) zonder volumes eerst"
          $DC down --remove-orphans --rmi all || true

          echo ">>> Alle containers die nog draaien op host stoppen (safety, idempotent)"
          if [ -n "$(docker ps -q)" ]; then
            docker stop $(docker ps -q) || true
          fi
          if [ -n "$(docker ps -aq)" ]; then
            docker rm -f $(docker ps -aq) || true
          fi

          echo ">>> Alle volumes behalve DB volume verwijderen"
          ALL_VOLS=$(docker volume ls -q)
          for V in $ALL_VOLS; do
            if [ "$V" != "$DB_VOL" ]; then
              echo "Deleting volume: $V"
              docker volume rm "$V" || true
            else
              echo "Keeping DB volume: $V"
            fi
          done

          echo ">>> Prune dangling networks/images/build cache"
          docker network prune -f || true
          docker image prune -f || true
          docker builder prune -f || true

      - name: Build fresh & up
        shell: bash
        run: |
          set -e
          DC="${{ steps.dccmd.outputs.cmd }}"

          echo ">>> Build images with --no-cache and pull latest bases"
          $DC build --pull --no-cache

          echo ">>> Bring stack up clean using existing DB volume"
          $DC up -d --remove-orphans --renew-anon-volumes

      # ðŸ‘‡ DIT IS DE NIEUWE MAGIE
      - name: Wait for ingest & stream logs
        shell: bash
        run: |
          set -euo pipefail
          DC="${{ steps.dccmd.outputs.cmd }}"
          SERVICE="${INGEST_SERVICE_NAME}"

          echo ">>> Zoeken naar container ID voor service '$SERVICE'..."
          CONTAINER_ID="$($DC ps -q $SERVICE)"

          if [ -z "$CONTAINER_ID" ]; then
            echo "FATAL: kon geen container vinden voor service '$SERVICE'"
            $DC ps
            exit 1
          fi

          echo ">>> Container gevonden: $CONTAINER_ID"
          echo ">>> Wachten tot container draait (of faalt)..."

          # wacht-lus: check status en eventueel health, max ~60 iteraties (60s)
          ATTEMPTS=0
          MAX_ATTEMPTS=60
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            STATUS=$(docker inspect -f '{{.State.Status}}' "$CONTAINER_ID")
            HEALTH=$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$CONTAINER_ID")

            echo "Status: $STATUS (health: $HEALTH)"

            # status kan zijn: created / restarting / running / exited / dead
            if [ "$STATUS" = "exited" ] || [ "$STATUS" = "dead" ]; then
              echo "Container is gestopt met status '$STATUS'. Logs hieronder:"
              docker logs --tail=200 "$CONTAINER_ID" || true
              exit 1
            fi

            # als er een healthcheck is en die is healthy -> goed genoeg, break
            if [ "$STATUS" = "running" ] && [ "$HEALTH" = "healthy" ]; then
              echo "Container is running en healthy."
              break
            fi

            # als er gÃ©Ã©n healthcheck (health == "none") maar status is running -> we gaan door
            if [ "$STATUS" = "running" ] && [ "$HEALTH" = "none" ]; then
              echo "Container draait (geen healthcheck gedefinieerd)."
              break
            fi

            ATTEMPTS=$((ATTEMPTS+1))
            sleep 1
          done

          # als we hier uit de loop zijn zonder exit 1 dan draait ie (of lijkt ie ok)
          echo ">>> Live logs (laatste 200 regels, daarna volgen)..."
          # -f volgt de logs streamend zolang de job bezig is
          # we doen een timeout-achtige constructie zodat dit niet oneindig hangt als het gewoon goed is
          # We gebruiken stdbuf om realtime output af te dwingen
          if command -v stdbuf >/dev/null 2>&1; then
            stdbuf -oL -eL docker logs -f --tail=200 "$CONTAINER_ID" &
          else
            docker logs -f --tail=200 "$CONTAINER_ID" &
          fi
          
          LOG_PID=$!

          # wacht nog een korte periode zodat we de startup output echt zien.
          # Als de container ondertussen crasht -> fail.
          SLEEP_CHECKS=0
          MAX_SLEEP_CHECKS=20
          while [ $SLEEP_CHECKS -lt $MAX_SLEEP_CHECKS ]; do
            STATUS=$(docker inspect -f '{{.State.Status}}' "$CONTAINER_ID")
            if [ "$STATUS" = "exited" ] || [ "$STATUS" = "dead" ]; then
              echo "Container stopte tijdens init-phase. Final logs:"
              docker logs --tail=200 "$CONTAINER_ID" || true
              kill $LOG_PID || true
              exit 1
            fi
            sleep 1
            SLEEP_CHECKS=$((SLEEP_CHECKS+1))
          done

          echo ">>> Container lijkt stabiel. Stop log streaming."
          kill $LOG_PID || true
          wait $LOG_PID || true

      - name: Status
        shell: bash
        run: |
          DC="${{ steps.dccmd.outputs.cmd }}"
          echo "== Compose ps =="
          $DC ps || true

          echo "== docker ps =="
          docker ps || true

          echo "== Volumes on host (DB volume should still exist) =="
          docker volume ls
