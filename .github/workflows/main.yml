name: Deploy Newest version

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted]

    env:
      COMPOSE_PROJECT_NAME: mijnapp

    steps:
      - name: Pre-clean workspace
        shell: bash
        run: |
          set -e
          shopt -s dotglob nullglob
          if [ -d "$GITHUB_WORKSPACE" ]; then
            rm -rf "$GITHUB_WORKSPACE"/* || true
          fi

      - name: Checkout fresh
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Detect docker compose
        id: dccmd
        shell: bash
        run: |
          if docker compose version >/dev/null 2>&1; then
            echo "cmd=docker compose" >> "$GITHUB_OUTPUT"
          elif docker-compose version >/dev/null 2>&1; then
            echo "cmd=docker-compose" >> "$GITHUB_OUTPUT"
          else
            echo "Geen docker compose gevonden" >&2
            exit 1
          fi

      - name: Validate compose
        shell: bash
        run: |
          DC="${{ steps.dccmd.outputs.cmd }}"
          $DC config >/dev/null

      - name: Nuke host docker state
        shell: bash
        run: |
          set -e

          echo ">>> Stop ALL containers (if any)"
          if [ -n "$(docker ps -q)" ]; then
            docker stop $(docker ps -q) || true
          fi

          echo ">>> Remove ALL containers (if any)"
          if [ -n "$(docker ps -aq)" ]; then
            docker rm -f $(docker ps -aq) || true
          fi

          echo ">>> Remove ALL volumes (if any)"
          if [ -n "$(docker volume ls -q)" ]; then
            docker volume rm $(docker volume ls -q) || true
          fi

          echo ">>> Prune networks/images that are dangling"
          docker network prune -f || true
          docker image prune -f || true
          docker builder prune -f || true

          # optioneel: volledig image wipe (incl. non-dangling) => uncomment als je Ã©cht ALLES wilt
          # if [ -n "$(docker image ls -q)" ]; then
          #   docker rmi -f $(docker image ls -q) || true
          # fi

      - name: Compose down safety (orphans etc)
        shell: bash
        run: |
          set -e
          DC="${{ steps.dccmd.outputs.cmd }}"
          $DC down --remove-orphans --rmi all --volumes || true

      - name: Build fresh & up
        shell: bash
        run: |
          set -e
          DC="${{ steps.dccmd.outputs.cmd }}"

          echo ">>> Build images with --no-cache and pull latest bases"
          $DC build --pull --no-cache

          echo ">>> Bring stack up clean"
          $DC up -d --remove-orphans --renew-anon-volumes

      - name: Status
        shell: bash
        run: |
          DC="${{ steps.dccmd.outputs.cmd }}"
          $DC ps
          docker ps
          docker volume ls
